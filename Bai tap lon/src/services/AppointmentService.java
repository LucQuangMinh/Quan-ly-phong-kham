package services;

import dao.AppointmentDAO;
import dao.NotificationDAO;
import models.Appointment;
import models.Notification;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.LocalDateTime;

public class AppointmentService {

    private AppointmentDAO appointmentDAO = new AppointmentDAO();
    private NotificationDAO notificationDAO = new NotificationDAO();

    // üîπ T·∫°o l·ªãch h·∫πn m·ªõi (b·ªánh nh√¢n ƒë·∫∑t l·ªãch)
    public boolean createAppointment(Appointment appointment) {
        LocalDateTime appointmentDateTime = LocalDateTime.of(
                appointment.getDate(),
                appointment.getTime()
        );

        boolean success = appointmentDAO.create(appointment);
        if (success) {
            // ‚úÖ G·ª≠i th√¥ng b√°o cho b·ªánh nh√¢n: Order (PatientId, Title, Message, userType)
            notificationDAO.create(new Notification(
                    appointment.getPatientId(),
                    "ƒê·∫∑t l·ªãch th√†nh c√¥ng",
                    "B·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·∫πn th√†nh c√¥ng v·ªõi b√°c sƒ© ID " + appointment.getDoctorId() + " v√†o " + appointmentDateTime,
                    "patient"
            ));

            // ‚úÖ G·ª≠i th√¥ng b√°o cho b√°c sƒ©: Order (DoctorId, Title, Message, userType)
            notificationDAO.create(new Notification(
                    appointment.getDoctorId(),
                    "Y√™u c·∫ßu l·ªãch h·∫πn m·ªõi",
                    "B·ªánh nh√¢n ID " + appointment.getPatientId() + " ƒë√£ ƒë·∫∑t l·ªãch h·∫πn v·ªõi b·∫°n v√†o " + appointmentDateTime,
                    "doctor"
            ));
        }
        return success;
    }

    // üîπ B√°c sƒ© x√°c nh·∫≠n l·ªãch h·∫πn
    public boolean confirmAppointment(int appointmentId, int doctorId) {
        Appointment appointment = appointmentDAO.findById(appointmentId);
        if (appointment == null) {
            System.out.println("Appointment not found.");
            return false;
        }
        
        LocalDate date = appointment.getDate();
        LocalTime time = appointment.getTime();
        
        if (date == null || time == null) {
            System.out.println("Appointment time is invalid.");
            return false;
        }

        if (appointmentDAO.isDoctorBusy(doctorId, date, time)) {
            System.out.println("Doctor is busy at this time. Cannot confirm appointment.");
            return false;
        }

        boolean updated = appointmentDAO.updateStatus(appointmentId, "confirmed");
        if (updated) {
            // ‚úÖ G·ª≠i th√¥ng b√°o x√°c nh·∫≠n cho b·ªánh nh√¢n
            notificationDAO.create(new Notification(
                    appointment.getPatientId(),
                    "X√°c nh·∫≠n l·ªãch h·∫πn",
                    "L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b√°c sƒ© x√°c nh·∫≠n v√†o " + date + " l√∫c " + time,
                    "patient"
            ));

            // ‚úÖ G·ª≠i th√¥ng b√°o cho b√°c sƒ©
            notificationDAO.create(new Notification(
                    doctorId,
                    "X√°c nh·∫≠n th√†nh c√¥ng",
                    "B·∫°n ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn v·ªõi b·ªánh nh√¢n ID " + appointment.getPatientId(),
                    "doctor"
            ));
        }
        return updated;
    }

    // üîπ B√°c sƒ© t·ª´ ch·ªëi l·ªãch h·∫πn
    public boolean rejectAppointment(int appointmentId, int doctorId, String reason) {
        Appointment appointment = appointmentDAO.findById(appointmentId);
        if (appointment == null) {
            System.out.println("Appointment not found.");
            return false;
        }

        boolean updated = appointmentDAO.updateStatus(appointmentId, "cancelled");
        if (updated) {
            // ‚úÖ G·ª≠i th√¥ng b√°o t·ª´ ch·ªëi cho b·ªánh nh√¢n
            notificationDAO.create(new Notification(
                    appointment.getPatientId(),
                    "T·ª´ ch·ªëi l·ªãch h·∫πn",
                    "L·ªãch h·∫πn c·ªßa b·∫°n b·ªã b√°c sƒ© t·ª´ ch·ªëi. L√Ω do: " + reason,
                    "patient"
            ));

            // ‚úÖ G·ª≠i th√¥ng b√°o cho b√°c sƒ©
            notificationDAO.create(new Notification(
                    doctorId,
                    "T·ª´ ch·ªëi th√†nh c√¥ng",
                    "B·∫°n ƒë√£ t·ª´ ch·ªëi l·ªãch h·∫πn v·ªõi b·ªánh nh√¢n ID " + appointment.getPatientId(),
                    "doctor"
            ));
        }
        return updated;
    }

    // üîπ B√°c sƒ© ho√†n th√†nh l·ªãch h·∫πn
    public boolean completeAppointment(int appointmentId, int doctorId) {
        Appointment appointment = appointmentDAO.findById(appointmentId);
        if (appointment == null) {
            System.out.println("Appointment not found.");
            return false;
        }

        boolean updated = appointmentDAO.updateStatus(appointmentId, "completed");
        if (updated) {
            // ‚úÖ G·ª≠i th√¥ng b√°o ho√†n th√†nh cho b·ªánh nh√¢n
            notificationDAO.create(new Notification(
                    appointment.getPatientId(),
                    "Ho√†n th√†nh l·ªãch h·∫πn",
                    "L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ho√†n th√†nh th√†nh c√¥ng.",
                    "patient"
            ));
        }
        return updated;
    }

    // üîπ B·ªánh nh√¢n hu·ª∑ l·ªãch h·∫πn
    public boolean cancelAppointment(int appointmentId, int patientId, String reason) {
        Appointment appointment = appointmentDAO.findById(appointmentId);
        if (appointment == null) {
            System.out.println("Appointment not found.");
            return false;
        }

        boolean updated = appointmentDAO.updateStatus(appointmentId, "cancelled");
        if (updated) {
            // ‚úÖ G·ª≠i th√¥ng b√°o h·ªßy cho b√°c sƒ©
            notificationDAO.create(new Notification(
                    appointment.getDoctorId(),
                    "Hu·ª∑ l·ªãch h·∫πn",
                    "B·ªánh nh√¢n ƒë√£ hu·ª∑ l·ªãch h·∫πn. L√Ω do: " + reason,
                    "doctor"
            ));

            // ‚úÖ G·ª≠i th√¥ng b√°o h·ªßy cho b·ªánh nh√¢n
            notificationDAO.create(new Notification(
                    patientId,
                    "Hu·ª∑ l·ªãch h·∫πn",
                    "B·∫°n ƒë√£ hu·ª∑ l·ªãch h·∫πn th√†nh c√¥ng.",
                    "patient"
            ));
        }
        return updated;
    }
}